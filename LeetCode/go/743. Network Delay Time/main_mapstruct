package main

import "fmt"

type node struct {
	edge map[int]int
}

func (m *node) newNode() *node {
	m.edge = make(map[int]int)
	return m
}

var net map[int]*node

func networkDelayTime(times [][]int, N int, K int) int {
	//init
	net = make(map[int]*node)
	for _, time := range times {
		node, ok := net[time[0]]
		if !ok {
			node = node.newNode()
		}
		node.edge[time[1]] = time[2]
	}
	
	//find
	time := 0
	src, ok := net[K]
	if ok {
		maxTime := 0
		for target, time := range src {
			if finded[target] {
				continue
			}

		}
	}

	fmt.Println(res)
	return 0
}

func main() {
	times := make([][]int, 0, 3)
	times = append(times, []int{2, 1, 1}) //source, target, time
	times = append(times, []int{2, 3, 20})
	times = append(times, []int{1, 3, 5})
	times = append(times, []int{3, 4, 1})
	fmt.Println(networkDelayTime(times, 4, 2))
	fmt.Println(times, 4, 2)
}
