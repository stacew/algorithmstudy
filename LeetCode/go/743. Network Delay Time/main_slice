package main

import "fmt"

var net [][]int

func networkDelayTime(times [][]int, N int, K int) int {
	//init
	net = make([][]int, N)
	for i := 0; i < N; i++ {
		net[i] = make([]int, N)
		for j := 0; j < N; j++ {
			net[i][j] = -1
		}
	}
	net = make([][]int, N)
	for _, time := range times {
		node, ok := net[time[0]]
		if !ok {
			node = make(map[int]int)
		}
		node[time[1]] = time[2]
	}
	//init Node : 1~N
	finded := make([]int, N)
	//find
	time := 0
	src, ok := net[K]
	if ok {
		maxTime := 0
		for target, time := range src {
			if finded[target] {
				continue
			}

		}
	}

	fmt.Println(res)
	return 0
}

func main() {
	times := make([][]int, 0, 3)
	times = append(times, []int{2, 1, 1}) //source, target, time
	times = append(times, []int{2, 3, 20})
	times = append(times, []int{1, 3, 5})
	times = append(times, []int{3, 4, 1})
	fmt.Println(networkDelayTime(times, 4, 2))
	fmt.Println(times, 4, 2)
}
